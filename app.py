
import streamlit as st
from datetime import datetime

st.set_page_config(page_title="AI Project Classifier", layout="centered")
st.title("ü§ñ AI Project Type Classifier")

st.markdown("""
This assistant helps identify the correct **AI project category** based on your use case and preferences.
At the end, it generates a classification with justification.
""")

# --- Collect Inputs ---
st.markdown("### 1. Which industry is the project for?")
industry = st.selectbox(
    "Select the industry:",
    ["Technology / SaaS", "Healthcare", "Finance", "Retail", "Manufacturing", "Telecom"],
    help="Choose the industry context to narrow down AI applications."
)

st.markdown("### 2. What is the primary goal of your AI project?")
objective = st.selectbox(
    "Example goals:",
    [
        "Generate content (text, images, etc.) - Ex: write blog posts, generate product images",
        "Answer questions from documents - Ex: legal assistant that answers based on contracts",
        "Recommend products or items - Ex: suggest clothing based on user preferences",
        "Assist users in workflows or tasks - Ex: smart assistant guiding form filling",
        "Classify or detect patterns in data - Ex: fraud detection from transaction data",
        "Search and retrieve relevant information - Ex: semantic search for internal documents",
        "Moderate user-generated content - Ex: detect and flag offensive comments",
        "Transform or enhance media (audio/video) - Ex: improve quality of uploaded videos"
    ],
    help="This defines what your AI system is supposed to achieve."
)

st.markdown("### 3. What kind of data does your system use?")
data_type = st.multiselect(
    "Select all that apply:",
    ["Text", "Image", "Audio", "Video", "Structured data", "Multimodal (combined)"],
    help="Choose the types of input data your AI system will process."
)

st.markdown("### 4. Does the system interact directly with users?")
st.markdown("_Example: A chatbot, virtual assistant, or interface that users talk or click with._")
needs_interface = st.radio(
    "Does your system have direct human interaction?",
    ["Yes", "No"],
    help="Select 'Yes' if your AI product is used directly by a human via a UI or API."
)

st.markdown("### 5. Does the system need to understand or process long context or documents?")
st.markdown("_Example: Reading and summarizing full contracts, medical records, or long articles._")
context_length = st.radio(
    "Requires long-context understanding?",
    ["Yes", "No"],
    help="Select 'Yes' if your AI must process full documents or large conversational histories."
)

st.markdown("### 6. How much new content is generated by the system?")
content_generation_level = st.selectbox(
    "Choose the level of generation:",
    [
        "0 - None: only analysis or predictions (e.g., fraud detection)",
        "1 - Very low: short labels or categories only",
        "2 - Low: some reformulation or simple output",
        "3 - Moderate: paragraphs, basic summaries",
        "4 - High: full answers or creative content",
        "5 - Very high: highly original text, images, or media"
    ],
    help="Rate how much original output your AI system creates."
)

# Convert objective for logic
objective_base = objective.split(" - ")[0]
generation_level = int(content_generation_level.split(" - ")[0])

# --- Logic to classify project type ---
project_type = ""
justification = []

if objective_base == "Assist users in workflows or tasks" and needs_interface == "Yes":
    project_type = "AI Copilot / Assistant"
    justification.append("User-facing assistant that supports task execution")

elif objective_base == "Answer questions from documents" and context_length == "Yes":
    project_type = "Chatbot / RAG-based Q&A System"
    justification.append("Requires document understanding and retrieval-based responses")

elif objective_base == "Recommend products or items":
    project_type = "Recommendation System"
    justification.append("Core use case involves matching items with user preferences")

elif objective_base == "Generate content (text, images, etc.)" and generation_level >= 4:
    project_type = "AI Content Generation (Text/Image)"
    justification.append("Project focuses on generating new content with high originality")

elif "Multimodal (combined)" in data_type:
    project_type = "Multimodal Generation (Text + Image + Audio/Video)"
    justification.append("System uses multiple input types to produce diverse outputs")

elif objective_base == "Search and retrieve relevant information":
    project_type = "AI-Powered Search / Vector Retrieval"
    justification.append("System must find semantically relevant results from a knowledge base")

elif objective_base == "Transform or enhance media (audio/video)":
    project_type = "AI Video Editing / Enhancement"
    justification.append("Focus on processing and improving multimedia content")

elif objective_base == "Moderate user-generated content":
    project_type = "AI Moderation / Policy Enforcement"
    justification.append("Moderates and enforces rules in digital content or platforms")

elif objective_base == "Classify or detect patterns in data":
    project_type = "Classic ML Classification / Detection"
    justification.append("Uses structured or semi-structured data to detect patterns")

else:
    project_type = "Needs Further Definition"
    justification.append("Cannot be automatically classified ‚Äî manual analysis required")

# --- Output Result ---
if st.button("üîç Classify Project Type"):
    st.markdown(f"### ‚úÖ Identified Project Type: **{project_type}**")
    st.markdown("**Justification:**")
    for reason in justification:
        st.write(f"- {reason}")

    with st.expander("üìÑ View Generated Summary Report"):
        st.markdown(f"""
        #### AI Project Summary Report
        - **Industry**: {industry}
        - **AI Project Type**: {project_type}
        - **Date**: {datetime.now().strftime('%Y-%m-%d')}
        - **Justification**:
        """)
        for j in justification:
            st.markdown(f"- {j}")

        st.markdown("---")
        st.markdown("_Generated using AI Project Classifier on Streamlit_ ‚úÖ")

