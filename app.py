
import streamlit as st
from datetime import datetime

st.set_page_config(page_title="AI Project Classifier", layout="centered")
st.title("ü§ñ AI Project Type Classifier")

st.markdown("""
This assistant helps identify the correct **AI project category** based on your use case and preferences.
At the end, it generates a classification with justification.
""")

# --- Collect Inputs ---
industry = st.selectbox("Which industry is the project for?", [
    "Technology / SaaS", "Healthcare", "Finance", "Retail", "Manufacturing", "Telecom"])

objective = st.selectbox("What is the primary goal of your AI project?", [
    "Generate content (text, images, etc.)",
    "Answer questions from documents",
    "Recommend products or items",
    "Assist users in workflows or tasks",
    "Classify or detect patterns in data",
    "Search and retrieve relevant information",
    "Moderate user-generated content",
    "Transform or enhance media (audio/video)"])

data_type = st.multiselect("What kind of data does your system use?", [
    "Text", "Image", "Audio", "Video", "Structured data", "Multimodal (combined)"])

needs_interface = st.radio("Does the system interact directly with users?", ["Yes", "No"])

context_length = st.radio("Does the system need to understand or process long context or documents?", ["Yes", "No"])

generation_level = st.slider("How much new content is generated by the system?", 0, 5, 3)

# --- Logic to classify project type ---
project_type = ""
justification = []

if objective == "Assist users in workflows or tasks" and needs_interface == "Yes":
    project_type = "AI Copilot / Assistant"
    justification.append("User-facing assistant that supports task execution")

elif objective == "Answer questions from documents" and context_length == "Yes":
    project_type = "Chatbot / RAG-based Q&A System"
    justification.append("Requires document understanding and retrieval-based responses")

elif objective == "Recommend products or items":
    project_type = "Recommendation System"
    justification.append("Core use case involves matching items with user preferences")

elif objective == "Generate content (text, images, etc.)" and generation_level >= 4:
    project_type = "AI Content Generation (Text/Image)"
    justification.append("Project focuses on generating new content with high originality")

elif "Multimodal (combined)" in data_type:
    project_type = "Multimodal Generation (Text + Image + Audio/Video)"
    justification.append("System uses multiple input types to produce diverse outputs")

elif objective == "Search and retrieve relevant information":
    project_type = "AI-Powered Search / Vector Retrieval"
    justification.append("System must find semantically relevant results from a knowledge base")

elif objective == "Transform or enhance media (audio/video)":
    project_type = "AI Video Editing / Enhancement"
    justification.append("Focus on processing and improving multimedia content")

elif objective == "Moderate user-generated content":
    project_type = "AI Moderation / Policy Enforcement"
    justification.append("Moderates and enforces rules in digital content or platforms")

elif objective == "Classify or detect patterns in data":
    project_type = "Classic ML Classification / Detection"
    justification.append("Uses structured or semi-structured data to detect patterns")

else:
    project_type = "Needs Further Definition"
    justification.append("Cannot be automatically classified ‚Äî manual analysis required")

# --- Output Result ---
if st.button("üîç Classify Project Type"):
    st.markdown(f"### ‚úÖ Identified Project Type: **{project_type}**")
    st.markdown("**Justification:**")
    for reason in justification:
        st.write(f"- {reason}")

    with st.expander("üìÑ View Generated Summary Report"):
        st.markdown(f"""
        #### AI Project Summary Report
        - **Industry**: {industry}
        - **AI Project Type**: {project_type}
        - **Date**: {datetime.now().strftime('%Y-%m-%d')}
        - **Justification**:
        """)
        for j in justification:
            st.markdown(f"- {j}")

        st.markdown("---")
        st.markdown("_Generated using AI Project Classifier on Streamlit_ ‚úÖ")
